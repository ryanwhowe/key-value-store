<?php

namespace Test;

use Doctrine\DBAL\Configuration;
use Doctrine\DBAL\DriverManager;
use ryanwhowe\KeyValueStore\Manager;
use ryanwhowe\KeyValueStore\Store;

class storeTest extends \PHPUnit\Framework\TestCase {

    /**
     * @var \Doctrine\DBAL\Connection
     */
    protected static $connection;

    /**
     * @var array The local SQLite memory database connection configuration array
     */
    protected static $database_config = [
        'dbname' => ':memory:',
        'host'   => 'localhost',
        'driver' => 'pdo_sqlite',
    ];

    public static function setUpBeforeClass()
    {
        parent::setUpBeforeClass(); // TODO: Change the autogenerated stub
        self::$connection = DriverManager::getConnection(self::$database_config, new Configuration());
    }

    /**
     * Grouping Name provider for testing the reformatting that is expected of Grouping Names
     */
    public function groupingNameProvider()
    {
        return array(
            // TestInput, expectedOutput
            array('GroupName', 'GroupName'),
            array('Group Name', 'GroupName'),
            array('G roupName', 'GroupName'),
            array('G roup Name', 'GroupName'),
            array('GroupName1', 'GroupName1'),
            array('GroupName1 ', 'GroupName1'),
            array(' GroupName1', 'GroupName1'),
            array('GroupName 1', 'GroupName1'),
            array('Group Name 1', 'GroupName1'),
            array('G r o u p N a m e 1 2 ', 'GroupName12'),
        );
    }

    /**
     * @test
     * @dataProvider groupingNameProvider
     * @param $groupNameTest
     * @param $expectedOutput
     */
    public function GroupNameFormatting($groupNameTest, $expectedOutput)
    {
        $test = Store::create($groupNameTest, self::$connection);
        $result = $test->getGrouping();
        $this->assertEquals($expectedOutput, $result, "Group Name Formatting Error");
    }

    public function singleValueTestProvider()
    {
        return array(
            /* groupingName, key, value1, value2 */
            array('TestGrouping', 'TestKey', 'TestValue', 'OverrideValue'),
            array('TestGrouping1', 'TestKey1', 'TestValue1', 'OverrideValue1'),
            array('TestGrouping2', 'TestKey2', 'TestValue2', 'OverrideValue2'),
            array('TestGrouping3', 'TestKey3', 'TestValue3', 'OverrideValue3'),
            array('TestGrouping4', 'TestKey4', 'TestValue4', 'OverrideValue4'),
            array('TestGrouping5', 'TestKey5', 'TestValue5', 'OverrideValue5'),
        );
    }

    /**
     * @test
     * @dataProvider singleValueTestProvider
     * @param $grouping
     * @param $key
     * @param $testValue
     * @param $overrideValue
     */
    public function SingleValueOverridden($grouping, $key, $testValue, $overrideValue)
    {
        $store = Store::create($grouping, self::$connection);
        $store->setSingleValue($key, $testValue);
        $store->setSingleValue($key, $overrideValue);
        $result = $store->getSingleValue($key);
        $this->assertEquals($overrideValue, $result);
        $this->assertNotEquals($testValue, $result);
    }

    /**
     * This is the setUp method, this will create the testing database connected to a local SQLite instanced in
     * memory, there should be no residual tables or test data to clean up from this class.
     *
     * @throws \Doctrine\DBAL\DBALException
     */
    protected function setUp()
    {
        Manager::create(self::$connection)->createTable();
    }

    /**
     * This is the teardown method for the testing class.  All cleanup operations should be performed here.
     *
     * @throws \Doctrine\DBAL\DBALException
     */
    protected function tearDown()
    {
        Manager::create(self::$connection)->dropTable();
    }

}