<?php
/**
 * This file contains
 *
 * @author Ryan Howe
 * @since  2018-10-12
 */

namespace Test;

use Doctrine\DBAL\Configuration;
use Doctrine\DBAL\DriverManager;
use PHPUnit\Framework\TestCase;
use ryanwhowe\KeyValueStore\Manager;
use ryanwhowe\KeyValueStore\Store\SingleValue;

class SingleValueTest extends TestCase {

    /**
     * @var \Doctrine\DBAL\Connection
     */
    protected static $connection;

    /**
     * @var array The local SQLite memory database connection configuration array
     */
    protected static $database_config = [
        'dbname' => ':memory:',
        'host'   => 'localhost',
        'driver' => 'pdo_sqlite',
    ];

    /**
     * @throws \Doctrine\DBAL\DBALException
     */
    public static function setUpBeforeClass()
    {
        parent::setUpBeforeClass(); // TODO: Change the autogenerated stub
        self::$connection = DriverManager::getConnection(self::$database_config, new Configuration());
    }

    /**
     * @test
     * @throws \Doctrine\DBAL\DBALException
     * @throws \Exception
     */
    public function GetAllKeys()
    {
        $test = SingleValue::create('Test', self::$connection);
        $test->set('key1', 'value1');
        $test->set('key2', 'value2');
        $test->set('key3', 'value3');
        $test->set('key4', 'value4');
        $test->set('key5', 'value5');
        $expected = array('key1', 'key2', 'key3', 'key4', 'key5');
        $result = $test->getAllKeys();
        $this->assertEquals($expected, $result);
    }

    /**
     * @test
     * @throws \Doctrine\DBAL\DBALException
     * @throws \Exception
     */
    public function GetGroupingSet()
    {
        $testGroup = 'TestGroup';

        $expected = array(
            array('grouping' => $testGroup, 'key' => 'key1', 'value' => 'value1'),
            array('grouping' => $testGroup, 'key' => 'key2', 'value' => 'value2'),
            array('grouping' => $testGroup, 'key' => 'key3', 'value' => 'value3'),
            array('grouping' => $testGroup, 'key' => 'key4', 'value' => 'value4'),
            array('grouping' => $testGroup, 'key' => 'key5', 'value' => 'value5'),
            array('grouping' => $testGroup, 'key' => 'key6', 'value' => 'value6')
        );

        $singleValue = SingleValue::create($testGroup, self::$connection);
        foreach ($expected as $item) {
            $singleValue->set($item['key'], $item['value']);
        }

        $result = $singleValue->getGroupingSet();

        foreach ($result as &$item) {
            // We are removing the last_update, this is a timestamp and is not testable
            unset($item['last_update']);
        }

        $this->assertEquals($expected, $result);
    }

    /**
     * @test
     * @throws \Exception
     */
    public function Create()
    {
        $testGrouping = 'TestGrouping';
        $singleValue = SingleValue::create('TestGrouping', self::$connection);
        $resultGrouping = $singleValue->getGrouping();
        $this->assertEquals($testGrouping, $resultGrouping);
        $this->assertInstanceOf('ryanwhowe\KeyValueStore\Store\SingleValue', $singleValue);
    }

    /**
     * @test
     * @throws \Exception
     * @throws \Doctrine\DBAL\DBALException
     */
    public function Set()
    {
        $testGroup = 'TestGroup';
        $key = 'Key1';
        $expected = '';
        $testValues = array(
            'value1',
            'value2',
            'value3',
            'value4',
            'value5',
            'value6',
            'value3'
        );

        $singleValue = SingleValue::create($testGroup, self::$connection);
        foreach ($testValues as $value) {
            $singleValue->set($key, $value);
            $expected = $value;  // the last set value is what we expect out
        }

        $result = $singleValue->get($key);

        $this->assertEquals($expected, $result);
    }

    public function GetGrouping()
    {

    }

    public function Get()
    {

    }

    /**
     * This is the setUp method, this will create the testing database connected to a local SQLite instanced in
     * memory, there should be no residual tables or test data to clean up from this class.
     *
     * @throws \Doctrine\DBAL\DBALException
     */
    protected function setUp()
    {
        Manager::create(self::$connection)->createTable();
    }

    /**
     * This is the teardown method for the testing class.  All cleanup operations should be performed here.
     *
     * @throws \Doctrine\DBAL\DBALException
     */
    protected function tearDown()
    {
        Manager::create(self::$connection)->dropTable();
    }
}
